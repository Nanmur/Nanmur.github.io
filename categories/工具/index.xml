<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>工具 on NanmurSpace</title>
        <link>http://localhost:1313/categories/%E5%B7%A5%E5%85%B7/</link>
        <description>Recent content in 工具 on NanmurSpace</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Nanmur</copyright>
        <lastBuildDate>Sat, 14 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git入门</title>
        <link>http://localhost:1313/p/git/</link>
        <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/git/</guid>
        <description>&lt;img src="http://localhost:1313/p/git/Gitlogo.png" alt="Featured image of post Git入门" /&gt;&lt;h2 id=&#34;一创建版本库&#34;&gt;一、创建版本库
&lt;/h2&gt;&lt;h3 id=&#34;1配置git环境&#34;&gt;1.配置git环境
&lt;/h3&gt;&lt;p&gt;在git安装好以后，需要配置环境变量，命令行中输入以下命令：
&lt;code&gt;git config --global user.name &amp;quot;Your Name&amp;quot; &lt;/code&gt;git config &amp;ndash;global user.email &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:email@example.com&#34; &gt;email@example.com&lt;/a&gt;&amp;rdquo;
&lt;code&gt;git config --list&lt;/code&gt;：查看当前的git配置；&lt;/p&gt;
&lt;p&gt;配置好环境后，使用&lt;code&gt;git init&lt;/code&gt;，即可将当前目录变成一个git可以管理的仓库；&lt;/p&gt;
&lt;p&gt;git顺序：工作区 &amp;ndash;&amp;gt; add &amp;ndash;&amp;gt; 暂存区 &amp;ndash;&amp;gt; commit &amp;ndash;&amp;gt; 版本库 &amp;ndash;&amp;gt; push &amp;ndash;&amp;gt; 远程版本库。&lt;/p&gt;
&lt;h3 id=&#34;2时光机穿梭&#34;&gt;2.时光机穿梭
&lt;/h3&gt;&lt;h4 id=&#34;1版本回退&#34;&gt;1.版本回退
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库的当前状态；
&lt;code&gt;git diff&lt;/code&gt;：查看上次修改的内容；
&lt;code&gt;git log&lt;/code&gt;：显示所有提交日志，可以增加&lt;code&gt;--pretty=oneline&lt;/code&gt;参数减少输出，可以使用&lt;code&gt;--graph --pretty=oneline --abbrev-commit&lt;/code&gt;参数使输出更加直观；
&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;：回退到上一版本，在git中，&lt;code&gt;HEAD&lt;/code&gt;表示当前版本，&lt;code&gt;HEAD^&lt;/code&gt;表示上一版本，&lt;code&gt;HEAD^^&lt;/code&gt;表示上上个版本，&lt;code&gt;HEAD~10&lt;/code&gt;表示往前第10个版本；
&lt;code&gt;git reset --hard &amp;lt;commit_id&amp;gt;&lt;/code&gt;：回退到指定的&lt;code&gt;commit_id&lt;/code&gt;版本，&lt;code&gt;commit_id&lt;/code&gt;可以不用输完整，输前几位就能找到；
&lt;code&gt;git reflog&lt;/code&gt;：查看历史命令，可以用来找回&lt;code&gt;commit_id&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;二撤销修改&#34;&gt;二、撤销修改
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git restore &amp;lt;file_name&amp;gt;&lt;/code&gt;：撤销对文件的修改（工作区）；
&lt;code&gt;git restore --staged &amp;lt;file_name&amp;gt;&lt;/code&gt;：撤销已经&lt;code&gt;git add&lt;/code&gt;放到暂存区的文件；
&lt;code&gt;git reset --hard HEAD&lt;/code&gt;：撤销已经&lt;code&gt;git commit&lt;/code&gt;到版本库的修改，即回退到上一版本。&lt;code&gt;--hard&lt;/code&gt;表示之前的修改直接丢掉，&lt;code&gt;--mixed(default)&lt;/code&gt;表示之前的修改保留在工作区，&lt;code&gt;--soft&lt;/code&gt;表示之前的修改保留在暂存区。&lt;/p&gt;
&lt;h2 id=&#34;三删除文件&#34;&gt;三、删除文件
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git rm &amp;lt;file_name&amp;gt;&lt;/code&gt;：删除版本库中的文件，需要再使用&lt;code&gt;git commit&lt;/code&gt;提交删除到版本库；
若删除了工作区的文件，想从版本库中恢复到工作区，可以使用&lt;code&gt;git restore &amp;lt;file_name&amp;gt;&lt;/code&gt;；&lt;/p&gt;
&lt;h2 id=&#34;四分支管理&#34;&gt;四、分支管理
&lt;/h2&gt;&lt;h3 id=&#34;1创建与合并分支&#34;&gt;1.创建与合并分支
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git checkout -b dev&lt;/code&gt;：&lt;code&gt;-b&lt;/code&gt;参数表示创建并切换到&lt;code&gt;dev&lt;/code&gt;分支，该命令同&lt;code&gt;git switch -c dev&lt;/code&gt;；
&lt;code&gt;git merge dev&lt;/code&gt;：合并&lt;code&gt;dev&lt;/code&gt;分支到当前分支；
&lt;code&gt;git merge --no-ff dev&lt;/code&gt;：合并但禁用快速合并（推荐），因为&lt;code&gt;dev&lt;/code&gt;分支上可能会有很多零碎的提交，这种方式能够避免搅乱&lt;code&gt;master&lt;/code&gt;的分支提交历史；
&lt;code&gt;git branch -d dev&lt;/code&gt;：删除&lt;code&gt;dev&lt;/code&gt;分支，参数&lt;code&gt;-D&lt;/code&gt;表示强制删除，用来删除还未合并的分支。&lt;/p&gt;
&lt;h3 id=&#34;2解决冲突&#34;&gt;2.解决冲突
&lt;/h3&gt;&lt;p&gt;若合并时存在冲突，使用&lt;code&gt;git status&lt;/code&gt;查看冲突文件；
然后手动编辑文件解决冲突。&lt;/p&gt;
&lt;h2 id=&#34;五bug分支&#34;&gt;五、Bug分支
&lt;/h2&gt;&lt;p&gt;修复Bug时，通常我们会创建新的Bug分支进行修复，然后合并，最后删除；
当手头工作没有完成，需要先把工作现场&lt;code&gt;git stash&lt;/code&gt;储藏起来，改完Bug后再用&lt;code&gt;git stash pop&lt;/code&gt;还原工作现场，可以使用&lt;code&gt;git stash list&lt;/code&gt;查看储藏列表；
在&lt;code&gt;master&lt;/code&gt;分支上修复的Bug，可以通过&lt;code&gt;git cherry-pick &amp;lt;commit_id&amp;gt;&lt;/code&gt;复制到当前分支。&lt;/p&gt;
&lt;h2 id=&#34;六多人协作&#34;&gt;六、多人协作
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;：查看远程分支详细信息；
&lt;code&gt;git push origin &amp;lt;branch_name&amp;gt;&lt;/code&gt;：推送到远程指定的分支上；
&lt;code&gt;git checkout -b dev origin/dev&lt;/code&gt;：创建远程的&lt;code&gt;dev&lt;/code&gt;分支到本地；
&lt;code&gt;git pull&lt;/code&gt;：从远程获取最新版本并&lt;code&gt;merge&lt;/code&gt;到本地，自动合并或修改当前的工作；
&lt;code&gt;git fetch&lt;/code&gt;：从远程拉取到本地仓库，不会自动合并或修改当前的工作；
&lt;code&gt;git --set-upstream-to=origin/dev dev&lt;/code&gt;：设置&lt;code&gt;dev&lt;/code&gt;分支与远程&lt;code&gt;origin/dev&lt;/code&gt;分支的链接，链接完成后，在&lt;code&gt;dev&lt;/code&gt;分支中&lt;code&gt;git pull&lt;/code&gt;就会直接从&lt;code&gt;origin/dev&lt;/code&gt;上拉取了。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;dev&lt;/code&gt;分支上执行&lt;code&gt;git rebase master&lt;/code&gt;：若此时&lt;code&gt;master&lt;/code&gt;上有新的提交，则用&lt;code&gt;master&lt;/code&gt;上的新提交来作为&lt;code&gt;dev&lt;/code&gt;的新基底，若&lt;code&gt;master&lt;/code&gt;上没有提交，则类似于进行了&lt;code&gt;merge&lt;/code&gt;操作。一般公司里会禁用&lt;code&gt;rebase&lt;/code&gt;，统一使用&lt;code&gt;merge&lt;/code&gt;，因为&lt;code&gt;rebase&lt;/code&gt;会整合分支提交记录，不清楚主线上谁合了代码以及他们合代码的先后顺序。&lt;/p&gt;
&lt;p&gt;注意：总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
