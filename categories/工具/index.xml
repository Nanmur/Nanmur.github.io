<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>工具 on NanmurSpace</title>
        <link>https://Nanmur.github.io/categories/%E5%B7%A5%E5%85%B7/</link>
        <description>Recent content in 工具 on NanmurSpace</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Nanmur</copyright>
        <lastBuildDate>Mon, 16 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://Nanmur.github.io/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Ngrok内网穿透连接本地Mysql数据库</title>
        <link>https://Nanmur.github.io/p/ngrok/</link>
        <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://Nanmur.github.io/p/ngrok/</guid>
        <description>&lt;img src="https://Nanmur.github.io/p/ngrok/Ngroklogo.png" alt="Featured image of post Ngrok内网穿透连接本地Mysql数据库" /&gt;&lt;h2 id=&#34;ngrok简述&#34;&gt;Ngrok简述
&lt;/h2&gt;&lt;p&gt;Ngrok 是一个反向代理工具，它能够让运行在本地开发环境中的 Web 应用程序通过安全通道暴露在互联网上。简单来说，它可以把你本地计算机（比如localhost）上运行的服务，如 Web 服务器、API 等，映射到一个公共的互联网 URL，使得外部网络（如互联网上的其他设备）能够访问你本地的服务。
Ngrok 在本地机器和公共互联网之间建立一个隧道。当外部请求发送到 ngrok 分配的公共 URL 时，ngrok 会将这些请求转发到本地开发环境中运行的相应服务。例如，你在本地运行了一个 Web 应用，监听在http://localhost:3000 端口，通过 ngrok 可以生成一个类似https://your - ngrok - subdomain.ngrok.io的公共 URL。当用户在浏览器中访问这个公共 URL 时，ngrok 会把请求转发到本地的http://localhost:3000，然后将本地服务返回的响应再转发回用户的浏览器。
Ngrok 提供了一定程度的安全性，它可以通过配置使用安全的 HTTPS 连接。不过，在使用过程中也需要注意保护本地服务的安全。因为一旦通过 ngrok 将本地服务暴露在互联网上，如果本地服务本身存在安全漏洞，就有可能被恶意利用。同时，ngrok 免费版本有一定的限制，如流量限制、连接数限制等，对于商业或高负载应用可能需要考虑付费版本来满足需求。&lt;/p&gt;
&lt;h2 id=&#34;安装与配置只需进行一次&#34;&gt;安装与配置(只需进行一次)
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先进入&lt;a class=&#34;link&#34; href=&#34;https://ngrok.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ngrok官网&lt;/a&gt;注册账号，下载并安装适合你操作系统的 Ngrok 软件。安装完成后，需要进行注册并获取认证令牌（authtoken）。&lt;/li&gt;
&lt;li&gt;打开Ngrok的下载路径，在当前下载路径下cmd进入命令行窗口。输入&lt;code&gt;ngrok authtoken &amp;lt;YOUR_AUTHTOKEN&amp;gt;&lt;/code&gt;命令并运行，将你在 Ngrok 官网获取的认证令牌替换&amp;lt;YOUR_AUTHTOKEN&amp;gt;部分，这样就完成了 Ngrok 的基本配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;启动并监听&#34;&gt;启动并监听
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在Ngrok官网下进入左侧边栏中的Setup&amp;amp;Installation页面,下滑找到&lt;code&gt;Deploy your app online&lt;/code&gt;，选择&lt;code&gt;Static Domain&lt;/code&gt;模式,即获取一个永久的静态地址，以后每次启动只需要对这个地址进行挂载即可。&lt;/li&gt;
&lt;li&gt;复制&lt;code&gt;Static Domain&lt;/code&gt;下的&lt;code&gt;ngrok http --url=above-cat-presumably.ngrok-free.app 80&lt;/code&gt;命令，注意将之后的数字 80 改为数据库正在运行的端口号 xxx。这会创建一个 TCP 隧道，将本地的 xxx 端口（MySQL 服务端口）通过 Ngrok 穿刺连接到互联网上。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置数据库连接客户端&#34;&gt;配置数据库连接客户端
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;你要从外部连接本地 MySQL 数据库时，需要使用 Ngrok 分配的公共 TCP 地址。在数据库连接配置中，将主机地址（Host）更改为 Ngrok 分配的公共地址（即上步中的静态地址），端口号更改为 Ngrok 监听的端口。&lt;/li&gt;
&lt;li&gt;保持用户名和密码以及其他数据库连接相关的设置（如数据库名称、字符集等）不变。&lt;/li&gt;
&lt;li&gt;通过客户端下的环境，选择合适变成语言进行连接。例如，如果你是使用 Python 的mysql - connector - python库来连接 MySQL 数据库，原来的连接代码可能是：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mysql.connector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mydb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.tcp.ngrok.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 替换为Ngrok分配的主机地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 替换为Ngrok分配的端口号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;your_username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;your_password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;your_database_name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;js下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;0.tcp.ngrok.io&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 使用Ngrok分配的主机地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 使用Ngrok分配的端口号
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;your_username&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;your_password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;your_database_name&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;数据库连接错误: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;成功连接到数据库&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 在这里可以执行数据库操作，如查询、插入等
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;SELECT * FROM your_table&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queryErr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queryErr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;查询错误: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;queryErr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;查询结果: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Git入门</title>
        <link>https://Nanmur.github.io/p/git/</link>
        <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://Nanmur.github.io/p/git/</guid>
        <description>&lt;img src="https://Nanmur.github.io/p/git/Gitlogo.png" alt="Featured image of post Git入门" /&gt;&lt;h2 id=&#34;一创建版本库&#34;&gt;一、创建版本库
&lt;/h2&gt;&lt;h3 id=&#34;1配置git环境&#34;&gt;1.配置git环境
&lt;/h3&gt;&lt;p&gt;在git安装好以后，需要配置环境变量，命令行中输入以下命令：
&lt;code&gt;git config --global user.name &amp;quot;Your Name&amp;quot; &lt;/code&gt;git config &amp;ndash;global user.email &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:email@example.com&#34; &gt;email@example.com&lt;/a&gt;&amp;rdquo;
&lt;code&gt;git config --list&lt;/code&gt;：查看当前的git配置；&lt;/p&gt;
&lt;p&gt;配置好环境后，使用&lt;code&gt;git init&lt;/code&gt;，即可将当前目录变成一个git可以管理的仓库；&lt;/p&gt;
&lt;p&gt;git顺序：工作区 &amp;ndash;&amp;gt; add &amp;ndash;&amp;gt; 暂存区 &amp;ndash;&amp;gt; commit &amp;ndash;&amp;gt; 版本库 &amp;ndash;&amp;gt; push &amp;ndash;&amp;gt; 远程版本库。&lt;/p&gt;
&lt;h3 id=&#34;2时光机穿梭&#34;&gt;2.时光机穿梭
&lt;/h3&gt;&lt;h4 id=&#34;1版本回退&#34;&gt;1.版本回退
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库的当前状态；
&lt;code&gt;git diff&lt;/code&gt;：查看上次修改的内容；
&lt;code&gt;git log&lt;/code&gt;：显示所有提交日志，可以增加&lt;code&gt;--pretty=oneline&lt;/code&gt;参数减少输出，可以使用&lt;code&gt;--graph --pretty=oneline --abbrev-commit&lt;/code&gt;参数使输出更加直观；
&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;：回退到上一版本，在git中，&lt;code&gt;HEAD&lt;/code&gt;表示当前版本，&lt;code&gt;HEAD^&lt;/code&gt;表示上一版本，&lt;code&gt;HEAD^^&lt;/code&gt;表示上上个版本，&lt;code&gt;HEAD~10&lt;/code&gt;表示往前第10个版本；
&lt;code&gt;git reset --hard &amp;lt;commit_id&amp;gt;&lt;/code&gt;：回退到指定的&lt;code&gt;commit_id&lt;/code&gt;版本，&lt;code&gt;commit_id&lt;/code&gt;可以不用输完整，输前几位就能找到；
&lt;code&gt;git reflog&lt;/code&gt;：查看历史命令，可以用来找回&lt;code&gt;commit_id&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;二撤销修改&#34;&gt;二、撤销修改
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git restore &amp;lt;file_name&amp;gt;&lt;/code&gt;：撤销对文件的修改（工作区）；
&lt;code&gt;git restore --staged &amp;lt;file_name&amp;gt;&lt;/code&gt;：撤销已经&lt;code&gt;git add&lt;/code&gt;放到暂存区的文件；
&lt;code&gt;git reset --hard HEAD&lt;/code&gt;：撤销已经&lt;code&gt;git commit&lt;/code&gt;到版本库的修改，即回退到上一版本。&lt;code&gt;--hard&lt;/code&gt;表示之前的修改直接丢掉，&lt;code&gt;--mixed(default)&lt;/code&gt;表示之前的修改保留在工作区，&lt;code&gt;--soft&lt;/code&gt;表示之前的修改保留在暂存区。&lt;/p&gt;
&lt;h2 id=&#34;三删除文件&#34;&gt;三、删除文件
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git rm &amp;lt;file_name&amp;gt;&lt;/code&gt;：删除版本库中的文件，需要再使用&lt;code&gt;git commit&lt;/code&gt;提交删除到版本库；
若删除了工作区的文件，想从版本库中恢复到工作区，可以使用&lt;code&gt;git restore &amp;lt;file_name&amp;gt;&lt;/code&gt;；&lt;/p&gt;
&lt;h2 id=&#34;四分支管理&#34;&gt;四、分支管理
&lt;/h2&gt;&lt;h3 id=&#34;1创建与合并分支&#34;&gt;1.创建与合并分支
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git checkout -b dev&lt;/code&gt;：&lt;code&gt;-b&lt;/code&gt;参数表示创建并切换到&lt;code&gt;dev&lt;/code&gt;分支，该命令同&lt;code&gt;git switch -c dev&lt;/code&gt;；
&lt;code&gt;git merge dev&lt;/code&gt;：合并&lt;code&gt;dev&lt;/code&gt;分支到当前分支；
&lt;code&gt;git merge --no-ff dev&lt;/code&gt;：合并但禁用快速合并（推荐），因为&lt;code&gt;dev&lt;/code&gt;分支上可能会有很多零碎的提交，这种方式能够避免搅乱&lt;code&gt;master&lt;/code&gt;的分支提交历史；
&lt;code&gt;git branch -d dev&lt;/code&gt;：删除&lt;code&gt;dev&lt;/code&gt;分支，参数&lt;code&gt;-D&lt;/code&gt;表示强制删除，用来删除还未合并的分支。&lt;/p&gt;
&lt;h3 id=&#34;2解决冲突&#34;&gt;2.解决冲突
&lt;/h3&gt;&lt;p&gt;若合并时存在冲突，使用&lt;code&gt;git status&lt;/code&gt;查看冲突文件；
然后手动编辑文件解决冲突。&lt;/p&gt;
&lt;h2 id=&#34;五bug分支&#34;&gt;五、Bug分支
&lt;/h2&gt;&lt;p&gt;修复Bug时，通常我们会创建新的Bug分支进行修复，然后合并，最后删除；
当手头工作没有完成，需要先把工作现场&lt;code&gt;git stash&lt;/code&gt;储藏起来，改完Bug后再用&lt;code&gt;git stash pop&lt;/code&gt;还原工作现场，可以使用&lt;code&gt;git stash list&lt;/code&gt;查看储藏列表；
在&lt;code&gt;master&lt;/code&gt;分支上修复的Bug，可以通过&lt;code&gt;git cherry-pick &amp;lt;commit_id&amp;gt;&lt;/code&gt;复制到当前分支。&lt;/p&gt;
&lt;h2 id=&#34;六多人协作&#34;&gt;六、多人协作
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;：查看远程分支详细信息；
&lt;code&gt;git push origin &amp;lt;branch_name&amp;gt;&lt;/code&gt;：推送到远程指定的分支上；
&lt;code&gt;git checkout -b dev origin/dev&lt;/code&gt;：创建远程的&lt;code&gt;dev&lt;/code&gt;分支到本地；
&lt;code&gt;git pull&lt;/code&gt;：从远程获取最新版本并&lt;code&gt;merge&lt;/code&gt;到本地，自动合并或修改当前的工作；
&lt;code&gt;git fetch&lt;/code&gt;：从远程拉取到本地仓库，不会自动合并或修改当前的工作；
&lt;code&gt;git --set-upstream-to=origin/dev dev&lt;/code&gt;：设置&lt;code&gt;dev&lt;/code&gt;分支与远程&lt;code&gt;origin/dev&lt;/code&gt;分支的链接，链接完成后，在&lt;code&gt;dev&lt;/code&gt;分支中&lt;code&gt;git pull&lt;/code&gt;就会直接从&lt;code&gt;origin/dev&lt;/code&gt;上拉取了。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;dev&lt;/code&gt;分支上执行&lt;code&gt;git rebase master&lt;/code&gt;：若此时&lt;code&gt;master&lt;/code&gt;上有新的提交，则用&lt;code&gt;master&lt;/code&gt;上的新提交来作为&lt;code&gt;dev&lt;/code&gt;的新基底，若&lt;code&gt;master&lt;/code&gt;上没有提交，则类似于进行了&lt;code&gt;merge&lt;/code&gt;操作。一般公司里会禁用&lt;code&gt;rebase&lt;/code&gt;，统一使用&lt;code&gt;merge&lt;/code&gt;，因为&lt;code&gt;rebase&lt;/code&gt;会整合分支提交记录，不清楚主线上谁合了代码以及他们合代码的先后顺序。&lt;/p&gt;
&lt;p&gt;注意：总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
